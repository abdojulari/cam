#name: CI

# on:
#   push:
#     branches:
#       - main
#   pull_request:

# permissions:
#   actions: read
#   contents: read

# jobs:
#   main:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       # This enables task distribution via Nx Cloud
#       # Run this command as early as possible, before dependencies are installed
#       # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
#       - run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="e2e-ci"

#       # Cache node_modules
#       - uses: actions/setup-node@v4
#         with:
#           node-version: 20
#           cache: 'npm'

#       - run: npm ci --legacy-peer-deps
#       - uses: nrwl/nx-set-shas@v4

#       # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
#       # - run: npx nx-cloud record -- echo Hello World
#       # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
#       - run: npx nx affected -t lint test build e2e-ci

name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  actions: read
  contents: read

jobs:
  ci:
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up Node.js 22.5.1
      - name: Set up Node.js 22.5.1
        uses: actions/setup-node@v4
        with:
          node-version: '22.5.1'

      # Step 3: Install PM2 and NGINX
      - name: Install PM2 and NGINX
        run: |
          npm install -g pm2
          sudo apt update
          sudo apt install -y nginx

      # Step 4: Install app dependencies
      - name: Install app dependencies
        run: |
          npm ci --legacy-peer-deps

      # Step 5: Copy .env file (ensure env is set correctly in CI)
      - name: create .env file
        run: |
          cd
          echo "NUXT_PUBLIC_ILS_URL=${{ secrets.NUXT_PUBLIC_ILS_URL }}" >> .env
          echo "ILS_URL_DEV=${{ secrets.ILS_URL_DEV }}" >> .env
          echo "SYMWS_USER=${{ secrets.SYMWS_USER }}" >> .env
          echo "SYMWS_PASS=${{ secrets.SYMWS_PASS }}" >> .env
          echo "SYMWSCLIENTID=${{ secrets.SYMWSCLIENTID }}" >> .env
          echo "APPS_ID=${{ secrets.APPS_ID }}" >> .env
          echo "ENDPOINT=${{ secrets.ENDPOINT }}" >> .env
          echo "USER_ENDPOINT=${{ secrets.USER_ENDPOINT }}" >> .env
          echo "PATRON_USER=${{ secrets.PATRON_USER }}" >> .env
          echo "LOGIN_USER=${{ secrets.LOGIN_USER }}" >> .env
          echo "CRE_BARCODE_URL=${{ secrets.CRE_BARCODE_URL }}" >> .env
          echo "NUXT_CRE_TOKEN=${{ secrets.NUXT_CRE_TOKEN }}" >> .env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> .env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> .env
          echo "CRE_DUPLICATE_URL=${{ secrets.CRE_DUPLICATE_URL }}" >> .env
          
      # Step 6: Clean Nx build outputs and reset Nx cache
      - name: Clean Nx build outputs and reset Nx cache
        run: |
          cd /apps/online-registration
          rm -rf .output
          npx nx reset

      # Step 7: Build the project
      - name: Build the online-registration project
        run: |
          cd
          npx nx build online-registration --prod

      # Step 8: Start the application using PM2 (simulate prod environment)
      - name: Start the application with PM2
        run: |
          cd /apps/online-registration
          pm2 start ecosystem.config.cjs

      # Step 9: Optional - Save PM2 process list
      - name: Save PM2 process list
        run: pm2 save

      # Step 10: Optional - Output PM2 logs for debugging
      - name: Display PM2 logs
        run: pm2 logs

      # Optional: Test NGINX configuration (if you're doing this for testing)
      - name: Test NGINX configuration
        run: |
          sudo nginx -t

      # Optional: Start NGINX to serve content (if needed in CI)
      - name: Start NGINX service
        run: |
          sudo systemctl start nginx
